class Solution {
    public boolean isValidBST(TreeNode root) {
        //DFS
        return solve(root, null, null);
    }

    boolean solve(TreeNode root, Integer min, Integer max){
        if(root == null) return true;

        if(min != null && root.val <= min)
        return false;

        if(max != null && root.val >= max) 
        return false;

        return solve(root.left, min, root.val) && solve(root.right, root.val, max);
    }

        // Inorder Traversal Approach: Inorder of a valid BST is always a strictly increasing array
        /*
        ArrayList<Integer> ans = new ArrayList<>();
        solve(root, ans);

        for(int i=0;i<ans.size()-1;i++){
            if(ans.get(i) >= ans.get(i+1)) return false;
        }

        return true;
    }

    void solve(TreeNode root, ArrayList<Integer> ans){
        if(root == null) return;

        solve(root.left, ans);
        ans.add(root.val);
        solve(root.right, ans);
    }
    */
}
