import java.util.* ;
import java.io.*; 

 class Pair {
        int el;
        int dis;

        Pair(int first, int second){
            this.el = first;
            this.dis = second;
        }
    }
public class Solution 
{
    public static ArrayList<ArrayList<Integer>> calculatePrimsMST(int n, int m, ArrayList<ArrayList<Integer>> g)
    {
        // Write your code here.
        HashMap<Integer, ArrayList<Pair>> adj = new HashMap<>();
        boolean[] mst = new boolean[n];
        ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
        PriorityQueue<int[] > pq = new PriorityQueue<>((a, b) -> a[0] -b[0]);

        for(int i = 0;i<n;i++){
            adj.put(i, new ArrayList<>());
        }

        for(int i=0;i<m;i++){
            int u = g.get(i).get(0)-1;
            int v = g.get(i).get(1)-1;
            int weigh = g.get(i).get(2);

            adj.get(u).add(new Pair(v, weigh));
            adj.get(v).add(new Pair(u, weigh));
        }

        pq.add(new int[]{0, 0, -1});  //weight node parent
      while(!pq.isEmpty()){
           int[] front = pq.remove();
           int w = front[0];
           int node = front[1];
           int parent = front[2];

           if(mst[node]) continue;

            mst[node] = true;

            if(parent != -1){
                ans.add(new ArrayList<>(Arrays.asList(parent+1, node+1, w)));
            }
            
            for(int i=0;i< adj.get(node).size(); i++){
                Pair nbg = adj.get(node).get(i);

                if(!mst[nbg.el]){
               pq.add(new int[]{nbg.dis, nbg.el, node});
                }
            }
        }

        return ans;
    }
}
