class Solution {
    void dfs(int[] time, int[] low, boolean[] vis, int v, int timer, int parent,
            ArrayList<ArrayList<Integer>> adj, List<List<Integer>> ans) {
        vis[v] = true;
        time[v] = low[v] = timer;

        for (int i = 0; i < adj.get(v).size(); i++) {
            int el = adj.get(v).get(i);
            if (el == parent)
                continue;

            if (!vis[el]) {
                dfs(time, low, vis, el, timer + 1, v, adj, ans);
                // while backtracking or returning back.
                low[v] = Math.min(low[v], low[el]); //updating the low time of parent as well.

                if (low[el] > time[v]) { //if it is true, then there is only one way to reach this node and its from its parent, so this is a bridge
                    ans.add(new ArrayList<>(Arrays.asList(v, el)));
                }

            } else {
                low[v] = Math.min(low[v], low[el]);
            }
        }

    }

    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        // Bridge in a graph
        int[] time = new int[n];
        int[] low = new int[n];
        boolean[] vis = new boolean[n];
        List<List<Integer>> ans = new ArrayList<>();
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < connections.size(); i++) {
            int u = connections.get(i).get(0);
            int v = connections.get(i).get(1);

            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        dfs(time, low, vis, 0, 0, -1, adj, ans);

        return ans;
    }
}
