import java.util.*;

public class Solution {

	public static LinkedList<Integer> shortestPath(int[][] edges, int n, int m, int s, int t) {
		ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
		boolean[] visited = new boolean[n];
		int[] parent = new int[n];
		Queue<Integer> q = new LinkedList<>();

		for(int i=0;i<n;i++){
			adj.add(new ArrayList<>());
		}

		for(int i=0;i<m;i++){
			int u = edges[i][0] -1, v = edges[i][1] -1;

			adj.get(u).add(v);
			adj.get(v).add(u);
		}

		q.add(s-1);
		visited[s-1] = true;
		parent[s-1] = -1;

		while(!q.isEmpty()){
			int front = q.remove();

			for(int i=0;i<adj.get(front).size(); i++){
				int el = adj.get(front).get(i);

				if(!visited[el]){
					visited[el] = true;
					q.add(el);
					parent[el] = front;
				}
			}
		}

		LinkedList<Integer> ans = new LinkedList<>();
		int par =t-1;
		while(par != parent[s-1]){
			ans.add(0, par+1);
			par = parent[par];
		}

		// System.out.print(ans);

		return ans;
	}
}
