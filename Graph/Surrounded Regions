class Solution {
    void dfs(char[][] board, int r, int c, int row, int col){
        if(r < 0 || r >=row || c < 0 || c >= col || board[r][c] != 'O') return;

        board[r][c] = 'P';

        dfs(board, r, c-1, row, col);
        dfs(board, r, c+1, row, col);
        dfs(board, r-1, c, row, col);
        dfs(board, r+1, c, row, col);
    }

    public void solve(char[][] board) {
        int row = board.length, col = board[0].length;

        for(int i = 0;i<row;i++){
           if(board[i][0] == 'O') 
           dfs(board, i, 0, row, col);

           if(board[i][col-1] == 'O') 
           dfs(board, i, col-1, row, col);
        }

        for(int i = 0;i<col;i++){
           if(board[0][i] == 'O') 
           dfs(board, 0, i, row, col);

           if(board[row-1][i] == 'O') 
           dfs(board, row-1, i, row, col);
        }

        for(int i = 0;i<row;i++){
            for(int j = 0;j<col;j++){
               if(board[i][j] == 'O')
               board[i][j] = 'X';
               else if(board[i][j] == 'P')
               board[i][j] = 'O';
            }
        }

    }
}
