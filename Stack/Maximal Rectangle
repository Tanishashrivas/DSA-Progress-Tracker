class Solution {
    public int maximalRectangle(char[][] matrix) {
        int area = -1, n = matrix[0].length;
        area = largestRectangle(matrix[0], n);
        int maxArea = area;

        for(int i=1;i<matrix.length;i++){
            for(int j =0; j<matrix[i].length; j++){
                if(matrix[i][j] != '0')
                matrix[i][j] += matrix[i-1][j]-'0';
            }
        maxArea = Math.max(maxArea, largestRectangle(matrix[i], n));
        }

        return maxArea;
    }
    int largestRectangle(char[] arr, int n){
        ArrayList<Integer> next = new ArrayList<>(), prev = new ArrayList<>();
        int max = -1;
        next = nextElement(arr, n);
        prev = prevElement(arr, n);

        for(int i=0;i<n;i++){
            int l = arr[i]-'0';
            if(next.get(i) == -1){
                next.set(i, n);
            }
            int b = next.get(i) - prev.get(i) - 1;
            int area = l*b;
            // System.out.print(area+" ");

            max = Math.max(area, max);
        }
        return max;
    }
    ArrayList<Integer> nextElement(char[] arr, int n){
        ArrayList<Integer> ans = new ArrayList<Integer>();
        Stack<Integer> s = new Stack<>();
        s.push(-1);

        for(int i=n-1;i>=0;i--){
            while(s.peek()!=-1 && (arr[s.peek()]-'0')>=(arr[i]-'0'))
            s.pop();

            ans.add(s.peek());
            s.push(i);
        }
        Collections.reverse(ans);
        return ans;
    }
    ArrayList<Integer> prevElement(char[] arr, int n){
        ArrayList<Integer> ans = new ArrayList<Integer>();
        Stack<Integer> s = new Stack<>();
        s.push(-1);

         for(int i=0;i<n;i++){
            while(s.peek()!=-1 && (arr[s.peek()]-'0')>=(arr[i]-'0'))
            s.pop();

            ans.add(s.peek());
            s.push(i);
        }
        return ans;
    }
}
